<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Bintree</title>
      <link href="2021/05/13/bintree/"/>
      <url>2021/05/13/bintree/</url>
      
        <content type="html"><![CDATA[<h1 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h1><hr><h2 id="前序遍历"><a href="#前序遍历" class="headerlink" title="前序遍历"></a>前序遍历</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">dlr</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">let</span> n<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span>        n<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>val<span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">{</span>            n<span class="token operator">=</span>n<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token function">dlr</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">{</span>            n<span class="token operator">=</span>n<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token function">dlr</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> n<span class="token punctuation">}</span></code></pre><hr><h2 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">ldr</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">let</span> n<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">{</span>            n<span class="token operator">=</span>n<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token function">dlr</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        n<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>val<span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">{</span>            n<span class="token operator">=</span>n<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token function">dlr</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> n<span class="token punctuation">}</span></code></pre><hr><h2 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">lrd</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">let</span> n<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">{</span>            n<span class="token operator">=</span>n<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token function">dlr</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">{</span>            n<span class="token operator">=</span>n<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token function">dlr</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        n<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>val<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> n<span class="token punctuation">}</span></code></pre><hr><h2 id="层序遍历"><a href="#层序遍历" class="headerlink" title="层序遍历"></a>层序遍历</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">level</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>    <span class="token keyword">let</span> n<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">let</span> t<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    t<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">let</span> tt<span class="token operator">=</span>t<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        n<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tt<span class="token punctuation">.</span>val<span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>tt<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">{</span>            t<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tt<span class="token punctuation">.</span>left<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>tt<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">{</span>            t<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tt<span class="token punctuation">.</span>right<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> n<span class="token punctuation">}</span></code></pre><hr><h2 id="求二叉树深度"><a href="#求二叉树深度" class="headerlink" title="求二叉树深度"></a>求二叉树深度</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">height</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>left<span class="token operator">||</span>r<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">let</span> rl<span class="token operator">=</span>r<span class="token punctuation">.</span>left<span class="token operator">?</span><span class="token function">height</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">0</span>        <span class="token keyword">let</span> rr<span class="token operator">=</span>r<span class="token punctuation">.</span>right<span class="token operator">?</span><span class="token function">height</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">0</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token operator">+</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>rl<span class="token punctuation">,</span>rr<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">1</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> t<span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Search</title>
      <link href="2021/05/13/search/"/>
      <url>2021/05/13/search/</url>
      
        <content type="html"><![CDATA[<h1 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h1><hr><h2 id="常规"><a href="#常规" class="headerlink" title="常规"></a>常规</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">search</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">let</span> <span class="token punctuation">[</span>min<span class="token punctuation">,</span>max<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span>n<span class="token punctuation">.</span>length<span class="token number">-1</span><span class="token punctuation">]</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>min<span class="token operator">&lt;=</span>max<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">let</span> mid<span class="token operator">=</span>min<span class="token operator">+</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>max<span class="token operator">-</span>min<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">===</span>k<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> mid        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">></span>k<span class="token punctuation">)</span><span class="token punctuation">{</span>            max<span class="token operator">=</span>mid<span class="token number">-1</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">&lt;</span>k<span class="token punctuation">)</span><span class="token punctuation">{</span>            min<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span></code></pre><hr><h2 id="变式（查找第一个比k大的元素）"><a href="#变式（查找第一个比k大的元素）" class="headerlink" title="变式（查找第一个比k大的元素）"></a>变式（查找第一个比k大的元素）</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">search1</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">let</span> <span class="token punctuation">[</span>min<span class="token punctuation">,</span>max<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span>n<span class="token punctuation">.</span>length<span class="token number">-1</span><span class="token punctuation">]</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>min<span class="token operator">&lt;=</span>max<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">let</span> mid<span class="token operator">=</span>min<span class="token operator">+</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>max<span class="token operator">-</span>min<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">&lt;=</span>k<span class="token punctuation">)</span><span class="token punctuation">{</span>            min<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">></span>k<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token punctuation">[</span>mid<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">></span>k<span class="token punctuation">)</span><span class="token punctuation">{</span>                max<span class="token operator">=</span>mid<span class="token number">-1</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> mid            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span></code></pre><hr><h2 id="需要注意的点"><a href="#需要注意的点" class="headerlink" title="需要注意的点"></a>需要注意的点</h2><p>mid的表示，跳出循环的条件</p>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sort</title>
      <link href="2021/05/13/sort/"/>
      <url>2021/05/13/sort/</url>
      
        <content type="html"><![CDATA[<h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><hr><h2 id="冒泡排序O-n-2"><a href="#冒泡排序O-n-2" class="headerlink" title="冒泡排序O(n^2)"></a>冒泡排序O(n^2)</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j<span class="token operator">=</span>i<span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span>n<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">let</span> t<span class="token operator">=</span>n<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>n<span class="token punctuation">[</span>j<span class="token punctuation">]</span>                n<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>t            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> n</code></pre><h3 id="原地，稳定"><a href="#原地，稳定" class="headerlink" title="原地，稳定"></a>原地，稳定</h3><hr><h2 id="插入排序O-n-2"><a href="#插入排序O-n-2" class="headerlink" title="插入排序O(n^2)"></a>插入排序O(n^2)</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">let</span> v<span class="token operator">=</span>n<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> j<span class="token operator">=</span>i<span class="token number">-1</span><span class="token punctuation">;</span>j<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;=</span>v<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">break</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                n<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>n<span class="token punctuation">[</span>j<span class="token punctuation">]</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        n<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>v    <span class="token punctuation">}</span>    <span class="token keyword">return</span> n</code></pre><h3 id="原地，稳定-1"><a href="#原地，稳定-1" class="headerlink" title="原地，稳定"></a>原地，稳定</h3><hr><h2 id="选择排序O-n-2"><a href="#选择排序O-n-2" class="headerlink" title="选择排序O(n^2)"></a>选择排序O(n^2)</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">let</span> <span class="token punctuation">[</span>m<span class="token punctuation">,</span>mi<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">[</span>n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token punctuation">]</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> j<span class="token operator">=</span>i<span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;</span>m<span class="token punctuation">)</span><span class="token punctuation">{</span>                m<span class="token operator">=</span>n<span class="token punctuation">[</span>j<span class="token punctuation">]</span>                mi<span class="token operator">=</span>j            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">let</span> t<span class="token operator">=</span>n<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>n<span class="token punctuation">[</span>mi<span class="token punctuation">]</span>        n<span class="token punctuation">[</span>mi<span class="token punctuation">]</span><span class="token operator">=</span>t    <span class="token punctuation">}</span>    <span class="token keyword">return</span> n</code></pre><h3 id="原地，不稳定"><a href="#原地，不稳定" class="headerlink" title="原地，不稳定"></a>原地，不稳定</h3><hr><h2 id="归并排序O-nlog-n"><a href="#归并排序O-nlog-n" class="headerlink" title="归并排序O(nlog n)"></a>归并排序O(nlog n)</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">merge</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>length<span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> n    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">merge1</span><span class="token punctuation">(</span>        <span class="token function">merge</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>length<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token function">merge</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>length<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>n<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">merge1</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span>n2<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">let</span> start<span class="token operator">=</span><span class="token number">0</span>    n2<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>n<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span>start<span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n1<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>n1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span>n<span class="token punctuation">)</span><span class="token punctuation">{</span>                start<span class="token operator">=</span>i                <span class="token keyword">break</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        n1<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> n1<span class="token punctuation">}</span></code></pre><h3 id="非原地，稳定"><a href="#非原地，稳定" class="headerlink" title="非原地，稳定"></a>非原地，稳定</h3><hr><h2 id="快速排序O-nlog-n"><a href="#快速排序O-nlog-n" class="headerlink" title="快速排序O(nlog n)"></a>快速排序O(nlog n)</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fast</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">fast1</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>n<span class="token punctuation">.</span>length<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">fast1</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>min<span class="token punctuation">,</span>max<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>max<span class="token operator">-</span>min<span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> n    <span class="token punctuation">}</span>    <span class="token keyword">let</span> p<span class="token operator">=</span><span class="token function">fast2</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>min<span class="token punctuation">,</span>max<span class="token punctuation">)</span>    <span class="token function">fast1</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>min<span class="token punctuation">,</span>p<span class="token number">-1</span><span class="token punctuation">)</span>    <span class="token function">fast1</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>max<span class="token punctuation">)</span>    <span class="token keyword">return</span> n<span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">fast2</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>min<span class="token punctuation">,</span>max<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">let</span> p<span class="token operator">=</span>n<span class="token punctuation">[</span>max<span class="token punctuation">]</span>    <span class="token keyword">let</span> i<span class="token operator">=</span>min    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j<span class="token operator">=</span>i<span class="token punctuation">;</span>j<span class="token operator">&lt;</span>max<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">></span>n<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">let</span> t<span class="token operator">=</span>n<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>n<span class="token punctuation">[</span>j<span class="token punctuation">]</span>            n<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>t            i<span class="token operator">++</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">let</span> t<span class="token operator">=</span>n<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>n<span class="token punctuation">[</span>max<span class="token punctuation">]</span>    n<span class="token punctuation">[</span>max<span class="token punctuation">]</span><span class="token operator">=</span>t    <span class="token keyword">return</span> i<span class="token punctuation">}</span></code></pre><h3 id="原地，不稳定-1"><a href="#原地，不稳定-1" class="headerlink" title="原地，不稳定"></a>原地，不稳定</h3><hr><h2 id="线性排序（复杂度为O-n-）"><a href="#线性排序（复杂度为O-n-）" class="headerlink" title="线性排序（复杂度为O(n)）"></a>线性排序（复杂度为O(n)）</h2><ul><li>桶排序（不稳定）</li><li>计数排序</li><li>基数排序</li></ul><h3 id="适用场景有限"><a href="#适用场景有限" class="headerlink" title="适用场景有限"></a>适用场景有限</h3>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Diary</title>
      <link href="2021/05/10/diary/"/>
      <url>2021/05/10/diary/</url>
      
        <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">Welcome to my blog, enter password to read.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
      
      
      <categories>
          
          <category> research </category>
          
          <category> project </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cesium </tag>
            
            <tag> 可视化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2021/05/09/hello-world/"/>
      <url>2021/05/09/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> init </category>
          
      </categories>
      
      
        <tags>
            
            <tag> init </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
