<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Bintree</title>
      <link href="2021/05/13/bintree/"/>
      <url>2021/05/13/bintree/</url>
      
        <content type="html"><![CDATA[<h1 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h1><hr><h2 id="前序遍历"><a href="#前序遍历" class="headerlink" title="前序遍历"></a>前序遍历</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">dlr</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">let</span> n<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span>        n<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>val<span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">{</span>            n<span class="token operator">=</span>n<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token function">dlr</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">{</span>            n<span class="token operator">=</span>n<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token function">dlr</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> n<span class="token punctuation">}</span></code></pre><hr><h2 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">ldr</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">let</span> n<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">{</span>            n<span class="token operator">=</span>n<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token function">dlr</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        n<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>val<span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">{</span>            n<span class="token operator">=</span>n<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token function">dlr</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> n<span class="token punctuation">}</span></code></pre><hr><h2 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">lrd</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">let</span> n<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">{</span>            n<span class="token operator">=</span>n<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token function">dlr</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">{</span>            n<span class="token operator">=</span>n<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token function">dlr</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        n<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>val<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> n<span class="token punctuation">}</span></code></pre><hr><h2 id="层序遍历"><a href="#层序遍历" class="headerlink" title="层序遍历"></a>层序遍历</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">level</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>    <span class="token keyword">let</span> n<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">let</span> t<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    t<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">let</span> tt<span class="token operator">=</span>t<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        n<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tt<span class="token punctuation">.</span>val<span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>tt<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">{</span>            t<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tt<span class="token punctuation">.</span>left<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>tt<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">{</span>            t<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tt<span class="token punctuation">.</span>right<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> n<span class="token punctuation">}</span></code></pre><hr><h2 id="求二叉树深度"><a href="#求二叉树深度" class="headerlink" title="求二叉树深度"></a>求二叉树深度</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">height</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>left<span class="token operator">||</span>r<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">let</span> rl<span class="token operator">=</span>r<span class="token punctuation">.</span>left<span class="token operator">?</span><span class="token function">height</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">0</span>        <span class="token keyword">let</span> rr<span class="token operator">=</span>r<span class="token punctuation">.</span>right<span class="token operator">?</span><span class="token function">height</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">0</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token operator">+</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>rl<span class="token punctuation">,</span>rr<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">1</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> t<span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Search</title>
      <link href="2021/05/13/search/"/>
      <url>2021/05/13/search/</url>
      
        <content type="html"><![CDATA[<h1 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h1><hr><h2 id="常规"><a href="#常规" class="headerlink" title="常规"></a>常规</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">search</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">let</span> <span class="token punctuation">[</span>min<span class="token punctuation">,</span>max<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span>n<span class="token punctuation">.</span>length<span class="token number">-1</span><span class="token punctuation">]</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>min<span class="token operator">&lt;=</span>max<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">let</span> mid<span class="token operator">=</span>min<span class="token operator">+</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>max<span class="token operator">-</span>min<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">===</span>k<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> mid        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">></span>k<span class="token punctuation">)</span><span class="token punctuation">{</span>            max<span class="token operator">=</span>mid<span class="token number">-1</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">&lt;</span>k<span class="token punctuation">)</span><span class="token punctuation">{</span>            min<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span></code></pre><hr><h2 id="变式（查找第一个比k大的元素）"><a href="#变式（查找第一个比k大的元素）" class="headerlink" title="变式（查找第一个比k大的元素）"></a>变式（查找第一个比k大的元素）</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">search1</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">let</span> <span class="token punctuation">[</span>min<span class="token punctuation">,</span>max<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span>n<span class="token punctuation">.</span>length<span class="token number">-1</span><span class="token punctuation">]</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>min<span class="token operator">&lt;=</span>max<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">let</span> mid<span class="token operator">=</span>min<span class="token operator">+</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>max<span class="token operator">-</span>min<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">&lt;=</span>k<span class="token punctuation">)</span><span class="token punctuation">{</span>            min<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">></span>k<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token punctuation">[</span>mid<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">></span>k<span class="token punctuation">)</span><span class="token punctuation">{</span>                max<span class="token operator">=</span>mid<span class="token number">-1</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> mid            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span></code></pre><hr><h2 id="需要注意的点"><a href="#需要注意的点" class="headerlink" title="需要注意的点"></a>需要注意的点</h2><p>mid的表示，跳出循环的条件</p>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sort</title>
      <link href="2021/05/13/sort/"/>
      <url>2021/05/13/sort/</url>
      
        <content type="html"><![CDATA[<h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><hr><h2 id="冒泡排序O-n-2"><a href="#冒泡排序O-n-2" class="headerlink" title="冒泡排序O(n^2)"></a>冒泡排序O(n^2)</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j<span class="token operator">=</span>i<span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span>n<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">let</span> t<span class="token operator">=</span>n<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>n<span class="token punctuation">[</span>j<span class="token punctuation">]</span>                n<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>t            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> n</code></pre><h3 id="原地，稳定"><a href="#原地，稳定" class="headerlink" title="原地，稳定"></a>原地，稳定</h3><hr><h2 id="插入排序O-n-2"><a href="#插入排序O-n-2" class="headerlink" title="插入排序O(n^2)"></a>插入排序O(n^2)</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">let</span> v<span class="token operator">=</span>n<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> j<span class="token operator">=</span>i<span class="token number">-1</span><span class="token punctuation">;</span>j<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;=</span>v<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">break</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                n<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>n<span class="token punctuation">[</span>j<span class="token punctuation">]</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        n<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>v    <span class="token punctuation">}</span>    <span class="token keyword">return</span> n</code></pre><h3 id="原地，稳定-1"><a href="#原地，稳定-1" class="headerlink" title="原地，稳定"></a>原地，稳定</h3><hr><h2 id="选择排序O-n-2"><a href="#选择排序O-n-2" class="headerlink" title="选择排序O(n^2)"></a>选择排序O(n^2)</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">let</span> <span class="token punctuation">[</span>m<span class="token punctuation">,</span>mi<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">[</span>n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token punctuation">]</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> j<span class="token operator">=</span>i<span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;</span>m<span class="token punctuation">)</span><span class="token punctuation">{</span>                m<span class="token operator">=</span>n<span class="token punctuation">[</span>j<span class="token punctuation">]</span>                mi<span class="token operator">=</span>j            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">let</span> t<span class="token operator">=</span>n<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>n<span class="token punctuation">[</span>mi<span class="token punctuation">]</span>        n<span class="token punctuation">[</span>mi<span class="token punctuation">]</span><span class="token operator">=</span>t    <span class="token punctuation">}</span>    <span class="token keyword">return</span> n</code></pre><h3 id="原地，不稳定"><a href="#原地，不稳定" class="headerlink" title="原地，不稳定"></a>原地，不稳定</h3><hr><h2 id="归并排序O-nlog-n"><a href="#归并排序O-nlog-n" class="headerlink" title="归并排序O(nlog n)"></a>归并排序O(nlog n)</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">merge</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>length<span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> n    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">merge1</span><span class="token punctuation">(</span>        <span class="token function">merge</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>length<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token function">merge</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>length<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>n<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">merge1</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span>n2<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">let</span> start<span class="token operator">=</span><span class="token number">0</span>    n2<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>n<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span>start<span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n1<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>n1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span>n<span class="token punctuation">)</span><span class="token punctuation">{</span>                start<span class="token operator">=</span>i                <span class="token keyword">break</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        n1<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> n1<span class="token punctuation">}</span></code></pre><h3 id="非原地，稳定"><a href="#非原地，稳定" class="headerlink" title="非原地，稳定"></a>非原地，稳定</h3><hr><h2 id="快速排序O-nlog-n"><a href="#快速排序O-nlog-n" class="headerlink" title="快速排序O(nlog n)"></a>快速排序O(nlog n)</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fast</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">fast1</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>n<span class="token punctuation">.</span>length<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">fast1</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>min<span class="token punctuation">,</span>max<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>max<span class="token operator">-</span>min<span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> n    <span class="token punctuation">}</span>    <span class="token keyword">let</span> p<span class="token operator">=</span><span class="token function">fast2</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>min<span class="token punctuation">,</span>max<span class="token punctuation">)</span>    <span class="token function">fast1</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>min<span class="token punctuation">,</span>p<span class="token number">-1</span><span class="token punctuation">)</span>    <span class="token function">fast1</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>max<span class="token punctuation">)</span>    <span class="token keyword">return</span> n<span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">fast2</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>min<span class="token punctuation">,</span>max<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">let</span> p<span class="token operator">=</span>n<span class="token punctuation">[</span>max<span class="token punctuation">]</span>    <span class="token keyword">let</span> i<span class="token operator">=</span>min    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j<span class="token operator">=</span>i<span class="token punctuation">;</span>j<span class="token operator">&lt;</span>max<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">></span>n<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">let</span> t<span class="token operator">=</span>n<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>n<span class="token punctuation">[</span>j<span class="token punctuation">]</span>            n<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>t            i<span class="token operator">++</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">let</span> t<span class="token operator">=</span>n<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>n<span class="token punctuation">[</span>max<span class="token punctuation">]</span>    n<span class="token punctuation">[</span>max<span class="token punctuation">]</span><span class="token operator">=</span>t    <span class="token keyword">return</span> i<span class="token punctuation">}</span></code></pre><h3 id="原地，不稳定-1"><a href="#原地，不稳定-1" class="headerlink" title="原地，不稳定"></a>原地，不稳定</h3><hr><h2 id="线性排序（复杂度为O-n-）"><a href="#线性排序（复杂度为O-n-）" class="headerlink" title="线性排序（复杂度为O(n)）"></a>线性排序（复杂度为O(n)）</h2><ul><li>桶排序（不稳定）</li><li>计数排序</li><li>基数排序</li></ul><h3 id="适用场景有限"><a href="#适用场景有限" class="headerlink" title="适用场景有限"></a>适用场景有限</h3>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Diary</title>
      <link href="2021/05/10/diary/"/>
      <url>2021/05/10/diary/</url>
      
        <content type="html"><![CDATA[<h1 id="之前"><a href="#之前" class="headerlink" title="之前"></a>之前</h1><hr><ul><li><p>cesium无海底地形</p></li><li><p>camera横向移动height变化原因，两极略扁赤道略鼓</p></li><li><p>cesium标准颜色不是css标准颜色</p></li><li><p>海拔只有camera&lt;2000km时才较为精准，无地形时海拔出现问题</p></li><li><p>贴图移位用GroundPrimitive解决</p></li><li><p>视觉效果较难解决，地下漫游体验极差，下一步尝试地上多层次</p></li></ul><h1 id="5-9"><a href="#5-9" class="headerlink" title="5.9"></a>5.9</h1><hr><ul><li><p>一个海洋4D可视化软件 <a href="https://www.qps.nl/fledermaus/">https://www.qps.nl/fledermaus/</a></p></li><li><p>mapbox，cesium加载地形经验</p><ul><li><p>mapbox加载地形</p><p>在mapbox studio中上传等高线矢量数据，用Fill-Extrusion形式渲染，按高程（deepth）拉伸等高线多边形，打包成style可以加载到cesium<br>问题：<br>a：最外层等高线由于deepth值最低所以被拉伸最高，因为是闭合多边形，所以内层的拉伸多边形都被覆盖不可见<br>b: 修改baseheight之后呈现出想要的效果（奇技淫巧，当有合适的pitch，效果类似明暗等高线），但pitch改变之后出现问题，影响视觉效果<br>c：打包到cesium后style中z轴信息消失，只有平面样式（但mapbox打包到cesium还是蛮有用的，有些好看的样式或者多层底图可以加载）<br>上传栅格数据（geotiff），在studio中没办法渲染立体效果，这篇文章将栅格转矢量后切片，然后用mapboxgl渲染成地形 <a href="https://www.jianshu.com/p/07c5df0418bc">https://www.jianshu.com/p/07c5df0418bc</a></p></li><li><p>cesium加载地形</p><p>支持地形数据格式 <a href="https://cesium.com/docs/tutorials/import-terrain/">https://cesium.com/docs/tutorials/import-terrain/</a><br>方法1：cesiumlab <a href="http://www.cesiumlab.com/#/help">http://www.cesiumlab.com/#/help</a> 将单波段tif（用arcmap矢量等高线转tif，可选分辨率）切片并发布本地服务，在cesiumjs项目中加载地形服务<br>方法2：地形数据上传到cesium ion（限额5GB），在cesiumjs项目中利用ion序列号加载<br>注意：保证数据具有完整的空间参考，注意空值的处理，上传tif时其依赖文件（such as .aux, .xml, .tab, .tfw, .wld, .prj, .ovr, .rrd）也要上传</p></li><li><p>试验后拟选用cesium直接加载地形数据（方法1，2都可），离目标效果还有较大差距，下一步拟改变地形图层颜色和透明值，上层覆盖    watershader贴纸…</p></li></ul></li></ul><h1 id="5-10"><a href="#5-10" class="headerlink" title="5.10"></a>5.10</h1><hr><ul><li><p>水面贴图失效</p></li><li><p>解决（…低级错误，忘记改贴图路径），海底视觉效果尚可</p></li><li><p>风场改用webgl渲染（还有很长的路要走。。多层次渲染也不太会搞。。但至少发现可以插值实现lod）</p></li><li><p>数据（多层次风场数据，海流，温盐场）寻找ing，但也不是很急，可以参考一下之前看过的论文</p></li></ul><h1 id="5-11"><a href="#5-11" class="headerlink" title="5.11"></a>5.11</h1><hr><ul><li><p>搞了一天NOAA风场数据（格式grib2-&gt;anl），难点包括各种气候短语的缩写，grib2json（github上找的脚本是面向linux的，找了一下午问题终于在简书上找到了）</p></li><li><p>找到可用的多层次风场数据,还没有解译到项目中</p></li><li><p>明天尝试把数据加载到项目中，并做多层次可视化</p></li></ul><h1 id="5-12"><a href="#5-12" class="headerlink" title="5.12"></a>5.12</h1><hr><ul><li><p>昨天批量下载转换的数据是包括temp字段的0.5度数据，修改参数之后转换出想要的只包含u，v速度的风场json数据</p></li><li><p>加载到项目中，验证可用，将之前的虚假多层次可视化（把一套数据搬到不同海拔。。）改写为真实的多层次可视化</p></li><li><p>仿照批量转换数据脚本改写定制转换插件，满足对数据的多元化要求</p></li><li><p>经验证，noaa风场数据只包含地上10m，20m，50m，100m等选择</p></li></ul><h1 id="5-13"><a href="#5-13" class="headerlink" title="5.13"></a>5.13</h1><hr><ul><li><p>划水的一天，划的非常开心</p></li><li><p>早起敲博客，整理了三篇算法内容，写博客的时候解决了代码块显示的相关问题</p></li><li><p>去机房开心地看比赛，看到中间被翔哥叫过去讨论（push）</p></li><li><p>为了逃避中午睡了一大觉，下午开心地去机房看了一下pdf地图的相关内容，，，其实就是不想写文档。。</p></li><li><p>明天开完组会要去团建，剧本杀！周末再写本子</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> research </category>
          
          <category> project </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cesium </tag>
            
            <tag> 可视化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2021/05/09/hello-world/"/>
      <url>2021/05/09/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> init </category>
          
      </categories>
      
      
        <tags>
            
            <tag> init </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
